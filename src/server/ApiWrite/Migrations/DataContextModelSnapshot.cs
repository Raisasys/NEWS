// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ApiWrite.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.ActionComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LastModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ObjectiveActionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ObjectiveActionId");

                    b.ToTable("ActionComment");
                });

            modelBuilder.Entity("Domain.ActionStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LastModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ObjectiveActionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ObjectiveActionId");

                    b.ToTable("ActionStatus");
                });

            modelBuilder.Entity("Domain.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LastModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("Domain.Consultant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LastModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PicProfile")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Consultant");
                });

            modelBuilder.Entity("Domain.LongTermObjective", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Key"));

                    b.Property<DateTimeOffset?>("LastModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OrbitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrbitId");

                    b.ToTable("LongTermObjective");
                });

            modelBuilder.Entity("Domain.MonthlyStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LastModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<Guid?>("ShortTermObjectiveId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ShortTermObjectiveId");

                    b.ToTable("MonthlyStatus");
                });

            modelBuilder.Entity("Domain.ObjectiveAction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Key"));

                    b.Property<DateTimeOffset?>("LastModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("NewDueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<DateTime?>("OriginalDueDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ShortTermObjectiveId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("Who")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ShortTermObjectiveId");

                    b.ToTable("ObjectiveAction");
                });

            modelBuilder.Entity("Domain.Orbit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Key"));

                    b.Property<DateTimeOffset?>("LastModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StartMonth")
                        .HasColumnType("int");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("YearDuration")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Orbit");
                });

            modelBuilder.Entity("Domain.ParticipantConsultant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConsultantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastEdit")
                        .HasColumnType("datetime2");

                    b.Property<DateTimeOffset?>("LastModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OrbitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Permission")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrbitId");

                    b.ToTable("ParticipantConsultant");
                });

            modelBuilder.Entity("Domain.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LastModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("Domain.ShortTermObjective", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Key"));

                    b.Property<DateTimeOffset?>("LastModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("LongTermObjectiveId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("YearId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LongTermObjectiveId");

                    b.HasIndex("YearId");

                    b.ToTable("ShortTermObjective");
                });

            modelBuilder.Entity("Domain.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LastModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Registered")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Domain.Year", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Key"));

                    b.Property<DateTimeOffset?>("LastModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OrbitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrbitId");

                    b.ToTable("Year");
                });

            modelBuilder.Entity("Domain.ActionComment", b =>
                {
                    b.HasOne("Domain.ObjectiveAction", null)
                        .WithMany("Comments")
                        .HasForeignKey("ObjectiveActionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.ActionStatus", b =>
                {
                    b.HasOne("Domain.ObjectiveAction", null)
                        .WithMany("Statuses")
                        .HasForeignKey("ObjectiveActionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("Domain.Status", "Status", b1 =>
                        {
                            b1.Property<Guid>("ActionStatusId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int?>("Direction")
                                .HasColumnType("int");

                            b1.Property<int?>("RAG")
                                .HasColumnType("int");

                            b1.HasKey("ActionStatusId");

                            b1.ToTable("ActionStatus");

                            b1.WithOwner()
                                .HasForeignKey("ActionStatusId");
                        });

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Domain.Company", b =>
                {
                    b.OwnsOne("Core.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("CompanyId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("City")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Country")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Detail")
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)");

                            b1.Property<string>("PostalCode")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("CompanyId");

                            b1.ToTable("Company");

                            b1.WithOwner()
                                .HasForeignKey("CompanyId");
                        });

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Domain.Consultant", b =>
                {
                    b.OwnsOne("Core.UserValue", "User", b1 =>
                        {
                            b1.Property<Guid>("ConsultantId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Email")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("FirstName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("LastName")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ConsultantId");

                            b1.ToTable("Consultant");

                            b1.WithOwner()
                                .HasForeignKey("ConsultantId");
                        });

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.LongTermObjective", b =>
                {
                    b.HasOne("Domain.Orbit", null)
                        .WithMany("LongTermObjectives")
                        .HasForeignKey("OrbitId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.MonthlyStatus", b =>
                {
                    b.HasOne("Domain.ShortTermObjective", null)
                        .WithMany("MonthlyStatuses")
                        .HasForeignKey("ShortTermObjectiveId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("Domain.Status", "Status", b1 =>
                        {
                            b1.Property<Guid>("MonthlyStatusId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int?>("Direction")
                                .HasColumnType("int");

                            b1.Property<int?>("RAG")
                                .HasColumnType("int");

                            b1.HasKey("MonthlyStatusId");

                            b1.ToTable("MonthlyStatus");

                            b1.WithOwner()
                                .HasForeignKey("MonthlyStatusId");
                        });

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Domain.ObjectiveAction", b =>
                {
                    b.HasOne("Domain.ShortTermObjective", null)
                        .WithMany("Actions")
                        .HasForeignKey("ShortTermObjectiveId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("Domain.ActionDuration", "Duration", b1 =>
                        {
                            b1.Property<Guid>("ObjectiveActionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int?>("EndMonth")
                                .HasColumnType("int");

                            b1.Property<int?>("EndWeek")
                                .HasColumnType("int");

                            b1.Property<int?>("EndYear")
                                .HasColumnType("int");

                            b1.Property<int?>("StartMonth")
                                .HasColumnType("int");

                            b1.Property<int?>("StartWeek")
                                .HasColumnType("int");

                            b1.Property<int?>("StartYear")
                                .HasColumnType("int");

                            b1.HasKey("ObjectiveActionId");

                            b1.ToTable("ObjectiveAction");

                            b1.WithOwner()
                                .HasForeignKey("ObjectiveActionId");
                        });

                    b.OwnsOne("Domain.ImportantUrgent", "ImportantUrgent", b1 =>
                        {
                            b1.Property<Guid>("ObjectiveActionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Important")
                                .HasColumnType("int");

                            b1.Property<int>("Urgent")
                                .HasColumnType("int");

                            b1.HasKey("ObjectiveActionId");

                            b1.ToTable("ObjectiveAction");

                            b1.WithOwner()
                                .HasForeignKey("ObjectiveActionId");
                        });

                    b.Navigation("Duration");

                    b.Navigation("ImportantUrgent");
                });

            modelBuilder.Entity("Domain.Orbit", b =>
                {
                    b.OwnsOne("Domain.OwnerCompany", "Owner", b1 =>
                        {
                            b1.Property<Guid>("OrbitId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("CompanyId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("CompanyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OrbitId");

                            b1.ToTable("Orbit");

                            b1.WithOwner()
                                .HasForeignKey("OrbitId");
                        });

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Domain.ParticipantConsultant", b =>
                {
                    b.HasOne("Domain.Orbit", null)
                        .WithMany("Consultants")
                        .HasForeignKey("OrbitId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("Core.UserValue", "AssignedBy", b1 =>
                        {
                            b1.Property<Guid>("ParticipantConsultantId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Email")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("FirstName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("LastName")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ParticipantConsultantId");

                            b1.ToTable("ParticipantConsultant");

                            b1.WithOwner()
                                .HasForeignKey("ParticipantConsultantId");
                        });

                    b.Navigation("AssignedBy");
                });

            modelBuilder.Entity("Domain.Person", b =>
                {
                    b.HasOne("Domain.Company", null)
                        .WithMany("Personnel")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("Core.UserValue", "User", b1 =>
                        {
                            b1.Property<Guid>("PersonId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Email")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("FirstName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("LastName")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PersonId");

                            b1.ToTable("Person");

                            b1.WithOwner()
                                .HasForeignKey("PersonId");
                        });

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.ShortTermObjective", b =>
                {
                    b.HasOne("Domain.LongTermObjective", null)
                        .WithMany("ShortTermObjectives")
                        .HasForeignKey("LongTermObjectiveId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Year", "Year")
                        .WithMany()
                        .HasForeignKey("YearId");

                    b.OwnsOne("Domain.Status", "Status", b1 =>
                        {
                            b1.Property<Guid>("ShortTermObjectiveId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int?>("Direction")
                                .HasColumnType("int");

                            b1.Property<int?>("RAG")
                                .HasColumnType("int");

                            b1.HasKey("ShortTermObjectiveId");

                            b1.ToTable("ShortTermObjective");

                            b1.WithOwner()
                                .HasForeignKey("ShortTermObjectiveId");
                        });

                    b.Navigation("Status");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("Domain.User", b =>
                {
                    b.OwnsOne("Core.FullName", "FullName", b1 =>
                        {
                            b1.Property<string>("UserId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("FirstName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("LastName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("MiddleName")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("UserId");

                            b1.ToTable("User");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("Core.Address", "Address", b1 =>
                        {
                            b1.Property<string>("UserId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("City")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Country")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Detail")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PostalCode")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("UserId");

                            b1.ToTable("User");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Address");

                    b.Navigation("FullName");
                });

            modelBuilder.Entity("Domain.Year", b =>
                {
                    b.HasOne("Domain.Orbit", null)
                        .WithMany("Years")
                        .HasForeignKey("OrbitId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("Domain.YearMonth", "End", b1 =>
                        {
                            b1.Property<Guid>("YearId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Month")
                                .HasColumnType("int");

                            b1.Property<int>("Year")
                                .HasColumnType("int");

                            b1.HasKey("YearId");

                            b1.ToTable("Year");

                            b1.WithOwner()
                                .HasForeignKey("YearId");
                        });

                    b.OwnsOne("Domain.YearMonth", "Start", b1 =>
                        {
                            b1.Property<Guid>("YearId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Month")
                                .HasColumnType("int");

                            b1.Property<int>("Year")
                                .HasColumnType("int");

                            b1.HasKey("YearId");

                            b1.ToTable("Year");

                            b1.WithOwner()
                                .HasForeignKey("YearId");
                        });

                    b.Navigation("End");

                    b.Navigation("Start");
                });

            modelBuilder.Entity("Domain.Company", b =>
                {
                    b.Navigation("Personnel");
                });

            modelBuilder.Entity("Domain.LongTermObjective", b =>
                {
                    b.Navigation("ShortTermObjectives");
                });

            modelBuilder.Entity("Domain.ObjectiveAction", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Statuses");
                });

            modelBuilder.Entity("Domain.Orbit", b =>
                {
                    b.Navigation("Consultants");

                    b.Navigation("LongTermObjectives");

                    b.Navigation("Years");
                });

            modelBuilder.Entity("Domain.ShortTermObjective", b =>
                {
                    b.Navigation("Actions");

                    b.Navigation("MonthlyStatuses");
                });
#pragma warning restore 612, 618
        }
    }
}
