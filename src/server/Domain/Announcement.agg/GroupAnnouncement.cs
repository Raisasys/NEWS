using Core;
using Core.Domain;
using Core.Types;

namespace Domain;

[AutoGeneratedKey]
public class GroupAnnouncement : Aggregate, IHaveAccess, IHaveCommunications
{
    protected GroupAnnouncement() { }

    public GroupAnnouncement(string title, string ownerScopeId, List<GroupAnnouncementItem> items)
    {
        Title = title;
        OwnerScopeId = ownerScopeId;
        Items =items;
    }



    public string Title { get; set; }
    public string OwnerScopeId { get; set; }
    public bool ShouldAuthenticated { get; set; }
    public virtual ICollection<GroupAnnouncementItem> Items { get; set; } = new List<GroupAnnouncementItem>();

    public ArchiveInfo Archived { get; set; }
    public PublishInfo Published { get; set; }
    
    public void Archive(string user)
    {
        Archived = new ArchiveInfo(DateTime.Now, user);
    }

    public void Publish(string user)
    {
        Published = new PublishInfo(DateTime.Now, user);
    }

    public bool IsGlobal { get; set; }
    public virtual ICollection<AccessEntityValue> AccessEntityItems { get; set; } = new List<AccessEntityValue>();

    public bool HasAccess(IUserIdentity identity) =>
        !IsDeleted && Archived == null && Published != null &&
        (!ShouldAuthenticated || IsGlobal ||(identity != null && this.HaveAccess(identity.Scopes.ToList(), identity.User)));

    public ICollection<CommunicationItem> Communications { get; set; }
}