using System.Reflection;
using Microsoft.EntityFrameworkCore;
using Core;
using Microsoft.EntityFrameworkCore.Metadata;

namespace Data;

public static class PropertyMapperPipeline
{
    private static readonly IList<PropertyMapper> Mappers;

    static PropertyMapperPipeline()
    {
        Mappers = new List<PropertyMapper>();
        SubscribeMappers();
    }

    public static void Subscribe<TMapper>() where TMapper : PropertyMapper, new()
        => Mappers.Add(new TMapper());


    public static void PropertiesMap(this ModelBuilder modelBuilder)
    {
        var entityTypes = TypeProvider.EntityTypes;
        foreach (var entityType in entityTypes)
            modelBuilder.PropertiesMap(entityType);
    }


    private static void PropertiesMap(this ModelBuilder modelBuilder, Type entityType)
    {
        var properties = entityType.GetProperties();
        foreach (var property in properties)
        foreach (var propertyMapper in Mappers)
            propertyMapper.Map(modelBuilder, entityType, property);
    }

    private static void SubscribeMappers()
    {
        var subscribeMethod = typeof(PropertyMapperPipeline).GetMethod(nameof(PropertyMapperPipeline.Subscribe), BindingFlags.Static | BindingFlags.Public);
        var mappers = typeof(PropertyMapper).Assembly.GetTypes().Where(p=> p.IsClass && !p.IsAbstract && p.BaseType == typeof(PropertyMapper)).ToList();
        foreach (var mapper in mappers)
        {
            var genericSubscribeMethod = subscribeMethod.MakeGenericMethod(mapper);
            genericSubscribeMethod.Invoke(null, null);
        }
    }
}

public abstract class PropertyMapper
{
    public abstract void Map(ModelBuilder modelBuilder, Type entityType, PropertyInfo propertyType);

    public static List<Type> CollectionTypes = new List<Type>
            { typeof(ICollection<>), typeof(IList<>), typeof(IEnumerable<>) };


    public static List<Type> IdentityTypes = new List<Type>
                { typeof(int), typeof(long)};
}

public class PrimaryKeyPropertyMapper : PropertyMapper
{
    public override void Map(ModelBuilder modelBuilder, Type entityType, PropertyInfo propertyType)
    {
        if (propertyType.IsPrimaryKey(entityType))
        {            
            modelBuilder
                .Entity(entityType)
                .HasKey(propertyType.Name);

            if (entityType.IsAutoGeneratedKey())
            {
                if (IdentityTypes.Contains(propertyType.PropertyType))
                {
                    modelBuilder
                        .Entity(entityType)
                        .Property(propertyType.Name)
                        .ValueGeneratedOnAdd()
                        .UseIdentityColumn(1);
                }
            }
        }
    }
}

public class IdentifierKeyPropertyMapper : PropertyMapper
{
    public override void Map(ModelBuilder modelBuilder, Type entityType, PropertyInfo propertyType)
    {
        if (propertyType.IsIdentifierKey(entityType))
        {
            modelBuilder
                .Entity(entityType)
                .Property(propertyType.Name)
                //.UseSqlServerIdentityColumn();
                .ValueGeneratedOnAdd()
                .UseIdentityColumn(1)
                .Metadata.SetAfterSaveBehavior(PropertySaveBehavior.Ignore);
        }
    }
}

public class CalculatedPropertyMapper : PropertyMapper
{
    public override void Map(ModelBuilder modelBuilder, Type entityType, PropertyInfo propertyType)
    {
        if (propertyType.IsCalculated())
        {
            modelBuilder
                .Entity(entityType)
                .Ignore(propertyType.Name);
        }
    }
}

public class UniquePropertyMapper : PropertyMapper
{
    public override void Map(ModelBuilder modelBuilder, Type entityType, PropertyInfo propertyType)
    {
        if (propertyType.IsUnique())
        {
            modelBuilder
                .Entity(entityType)
                .HasIndex(propertyType.Name);
                //.HasAlternateKey(propertyType.Name);
        }
    }
}

public class ImmutablePropertyMapper : PropertyMapper
{
    public override void Map(ModelBuilder modelBuilder, Type entityType, PropertyInfo propertyType)
    {
        if (propertyType.IsImmutable())
        {
            if (propertyType.PropertyType.IsGenericType)
            {
                if (CollectionTypes.Contains(propertyType.PropertyType.GetGenericTypeDefinition()))
                {
                    modelBuilder
                        .Entity(entityType)
                        .OwnsMany(propertyType.PropertyType.GetGenericArguments().First(), propertyType.Name);
                }
            }
            else
            {
                modelBuilder
                    .Entity(entityType)
                    .OwnsOne(propertyType.PropertyType, propertyType.Name);
            }
        }
    }
}

